Documentation for Defense Condition game project

Author(s): Ray Gardener (support@daylongraphics.com)
Repository: https://github.com/RayOfDaylon/Defcon
September 12, 2023

Chapters:

Introduction
Project Structure
Setting Up
How the Game is Played
Keyboard Issues
How the Game Works
Code Architecture
Future Work



Introduction
-------------------------------------------------------------------------------------
Defence Condition is a remake of the 1981 Williams' Electronics Stargate arcade game 
which tries to match its look and feel, but coded using Unreal Engine (UE 5.1, specifically).
It was previously implemented as a 32-bit Windows program with its own engine that 
used DIBsection framebuffers and GDI, with the source code hosted on SourceForge.

The goal is to provide an educational reference for people interested in how 
this type of game works and how it can be made in UE. Another benefit (fwiw) is 
helping preserve the legacy of a classic arcade game.

Much of the project is influenced by Stellar Mayhem, an earlier UE project 
that implemented Atari Asteroids using Slate UI widgets.

While I've endeavoured to make the source code readable, the rest of this document 
may provide more clarification.


How the Game is Played
-------------------------------------------------------------------------------------
The original arcade game had an explicit "reverse" button. Defcon instead 
uses the K and L keys to thrust left and right, respectively, automatically 
reorienting the ship as needed. Different input controllers may offer an 
exclusive reverse button, however.

A            Thrust up
Z            Thrust down
K            Thrust (and point) left
L            Thrust (and point) right
Space        Fire laser cannon
Ctrl         Detonate smartbomb
Backspace    Reserved for hyperspace
B            Toggle bullet time
P            Pause/unpause game
Esc          Leave game
Tab          Skip to next item
Enter        Select/proceed

Tab and Shift-Tab work in the mission picker to move the current selected
mission highlight forward and back with row advancement during wraparound.

The game gets harder over time. Specifically, landers will move faster, and 
enemies will fire bullets more accurately. Firebombers will shoot more fireballs.

Collide with the stargate at any time to randomly teleport elsewhere above 
the planet. If a human is being abducted, your ship will be teleported so 
that firing a laser beam will destroy the abducting lander.

After killing all the mission-critical enemies, collide with the stargate 
to jump to the next mission.

Enemies arrive in waves. Some enemies are created within a wave, like swarmers, 
which pods release when destroyed. Ditto for spacehums released by dynamos.
Others, like baiters, arrive after a long time to get you to "hurry up". 
These enemies are considered secondary and not necessary to kill to 
jump to the next mission.

Some debugging controls are available at runtime. They are:

0          Toggle frame rate display
1          Toggle player ship etc. stats
3          Toggle bounding boxes
4          Toggle planet origin axis line
8          Choose type of enemy to spawn (cycles through all enemy types)
9          Spawn enemy near the player ship
G          Toggle god mode
Numpad +   Increase XP by 5,000 pts
Numpad -   Decrease XP by 5,000 pts


How the Game Works
-------------------------------------------------------------------------------------
A game match starts when a mission is chosen and ends when:

  - Esc is pressed (game aborted)
  - A mission ends and no humans are remaining (defeat)
  - The last mission ends and one or more humans remain (victory)

Smart bomb explosions are drawn using a material that renders a circle within the full UV 
space of its quad, with a parameter to change its opacity. A texture could have 
been used but it would've had to be quite large to look sharp since the 
explosion covers almost the entire arena display.

The background stars are drawn with their own loop in MainPlayArea::NativePaint.
The original game used CStar objects but that would have been less efficient.

The terrain is drawn as a set of connected lines. The wraparound back to the 
origin is handled in a simplistic way that can cause the "join" to use a slope
quite different than 45 degrees.

Game objects use a planetary (or arena) coordinate space which is as wide 
as the visible section's Slate units multiplied by some preference constant (normally 6.0), 
and as tall as the visible section. As objects move, they check if they've 
crossed the horizontal origin and wrap around accordingly.

The main visible area and the radar display have their own coordinate mappers 
which map arena coordinates to their respective local Slate coordinates.

Rendering is handled by a few different means. Most game objects have a sprite 
so their Draw method is moot, but some will emit explicit Box or Line calls.
Some objects are not derived from IGameObject (like FStar) and are drawn 
by the main visible area. Some UI elements (like the introductory collapsing 
title and the animated starfield) are custom Slate or UMG widgets.

The Win32 GDI version used a pixel framebuffer (a DIBSECTION), similar to 
what arcade games did before 3D accelerators came along. Today's video 
architectures assume that textures, meshes, shaders etc. are uploaded 
to the GPU, and then short streams of render instructions are sent instead
on each frame.
  While framebuffers are expensive, they have two advantages I can think of:
  - It's far easier to implement certain effects, like the shield domes 
    taking damage in Space Invaders. To do this with a GPU, you need to 
    maintain a render target and update it.
  - You can implement whatever you want without fuss or mystery. 
    In GPU-based engines, unexpected things can happen and you have to 
    "fight" to get things working, looking up APIs, maybe reverse-engineering
    source code, etc. You have to become an expert on the system to get 
    more and more special stuff working.



Code Architecture
-------------------------------------------------------------------------------------
The DaylonGraphicsLibrary plugin is the same one used in Stellar Mayhem.
It has its own docs.txt file.

Because the code was originally written in 2003 for the Win32 API, 
it's not necessarily up-to-date with modern C++ style and especially not with UE.
Some API translation "shims" may still exist e.g. COLORREF_ is a compatability 
typedef for FLinearColor. CGameObjectCollection is a linked list (as opposed 
to using a TArray). As time goes by, these things will be addressed.

Memory usage: the original code uses operator new/delete. Someday we 
might have all dynamic objects derive from UObject to use UE's garbage collector, 
but new/delete is fast.

Each UUserWidget C++ class usually ends with the word "Base". This is to 
help distinguish it from the Blueprint widget which subclasses it.

The arenas from the Win32 game are now full-screen UUserWidgets (views) which are 
managed by the game instance. As the player navigates the UI and starts/completes 
missions, the current view is removed from the viewport and a different view is 
added to it. The OnActivate, OnFinishActivating, and OnDeactivate methods are 
called on a view to let it know when that happens. This is in stark contrast 
to Stellar Mayhem which only has one view and uses its state machine to 
show/hide UI elements to simulate multiple views.
    A tricky thing with UUserWidget is that some of its methods are called 
at design time, so care must be taken in that regard.

Parts of views are termed "widgets". A widget may derive from UUserWidget 
or some other UMG class, or from a Slate widget.

Since many classes are not derived from UObject and the dynamic_cast operator 
is unavailable, some classes have their own type information and when used 
to determine that an object is of a particular class, static_cast is used 
to safely up- or downcast.

IGameObject (the base of all game object classes) has three type info members:

- A type
- A parent type (e.g. round and thin bullets are subclasses of bullet)
- A creator type (e.g. PLAYER is usually the creator of LASERBEAM)

Defcon::ObjType is the enum of all possible object types.

Game objects are normally stored in a GameObjectCollection. The game instance 
holds humans in a Humans collection, and the play arena holds collections 
for enemies, debris, and misc. objects like laser beams/bullets/etc.
GameObjectCollection::Process() is the basic object processor that 
ticks each object by calling its Move method, wraps its arena position, 
deletes mortal objects if their lifespan has reached zero, etc.

Most game objects use a DaylonSprite2D (an SWidget) to visualize 
their appearance. However, only the main play widget establishes 
a current root canvas for those sprites to use, but that's okay since 
the game objects are never used outside the play area, and the 
radar widget just draws little squares with direct draw calls.
This means that any install/uninstall of sprites can only happen 
when the play arena is active. Classes such as Mission, GameObjectCollection, 
Event, etc. don't do any sprite processing elsewhere.

Global variables are:

GMessageMediator      Mediates message passing for loose coupling.
GArena                The play arena where a mission is played out.
GAudio                The collection of available audio tracks (sounds).
GDefconGameInstance   The singular game instance (has stats).

GGameMatch            Match particulars (player, humans, current mission, etc.).
                      Is nullptr if no match is active.

GGameObjectResources  Maps object types to their sprite atlases.
GPrefs                Preference settings.
GObjectTypeManager    Maps game object types to typenames (used for debugging).
GGameColors           A table of common colors in a range of brightnesses.

DefconGameInstance::IsLive is used to tell if the game is actually 
running or not. Some UUserWidget functions get called as part of the 
editor's design time behavior, but playtime-related code in a view shouldn't 
necessarily run at design time.

Object explosions create lots of debris objects that are each rendered with 
their own Draw method, instead of (like in Stellar Mayhem) using a 
particles widget that holds all the debris in a more efficient TArray 
and renders them in a tighter loop inside one Paint call. This will 
probably not change because smartbomb explosions also push debris 
away from their shockwaves, and that's easier to do if each debris piece 
is its own game object.

The global function GameTime() abstracts UKismetLibrary::GetGameTimeInSeconds.
It's declared in util_core.h but implemented in UDefconPlayViewBase.
Using the current time, however, is a discouraged practice as it will 
cause problems when implementing bullet time. Calls to it were removed 
from event creation and in ILiveGameObject's motion physics.

UDefconPlayViewBase contains three child widgets:

    - UDefconPlayMainWidgetBase    The main play area where the action takes place.
    - UDefconPlayRaderWidgetBase   The radar panel above the main play area.
    - UDefconPlayStatsWidgetBase   The player info panel next to the radar panel.

	 -------------------------------------------------
	|          |                                      |
	|  Stats   |              Radar                   |
	|__________|______________________________________|
	|                                                 |
	|                                                 |
	|                                                 |
	|           Main                                  |
	|                                                 |
	|                                                 |
	|_________________________________________________|

While UDefconPlayViewBase treats game objects in the abstract, 
it does categorize them into several collections for efficient processing, 
so it has a general idea what kinds of objects are where. For example, 
all player opponents are in an Enemies collection, debris is in a Debris 
collection, etc.



Future Work
-------------------------------------------------------------------------------------
Some declarations are outside the Defcon namespace when they shouldn't be.

Would be nice to use the Pause key instead of 'P' to pause the game. 
Unfortunately, UE detects Pause keypresses itself and toggles inputs on/off, 
which causes weird behavior. Until I figure out how UE manages pausing, 
the 'P' key it is.

Would be nice to have the functionality of DaylonSpritePlayObject 
available for custom painting e.g. calling from UUserWidget::NativePaint. 
This would solve display ordering issues when mixing custom painting
with widget rendering. Basically the cel determiner logic would be one 
function callable from NativeTick, and the render logic would be called 
from NativePaint.

There are explicit constants here and there that should be pref vars.

Secondary explosion texture atlas is used randomly, but should be 
used based on object type or mass since it's more "oomph" than 
the original explosion texture.

GameObject::m_inertia is computed by each game object class, when it should be 
possible to compute it in a game object collection processing loop.

Powerups. Different possibilities for how/when they would appear e.g. 
emitted by the stargate, by a factory on the ground, or dropped 
by enemies when they're destroyed, etc. Smart bombs would be 
powerups, along with shields, dual guns, invincibility.

Some textures still need remastering e.g. humans, dynamos, mines.

Would be kind of neat to have humans run away from landers when 
they get within a certain range. Not that they'd escape; it would 
just look cool and be more realistic.

Difficulty balancing. The game is currently too easy/slow at the start, 
and some parts are overly hard. Smart bombs also need to be awarded 
less often or handled by powerups. The player should have to hoard 
smart bombs to deal with later "boss" levels. On that note, missions 
like Firebomber Pack and Yllabian Dogfight should spread out the 
enemies so that winning them isn't a simple matter of detonating 
smartbombs.
   Enemy slowness basically stems from our using a larger coordinate space;
the Windows version was tuned for a 1024 px wide screen, but 
now we're at 1920. 4K (3840) doesn't have to be accounted for because 
we're now working in Slate units which UE autoscales for us -- we can 
remain at 1920 w/o caring what the actual screen resolution is.

Mission class should probably hold the enemies/debris/etc. collections 
since those objects only have mission lifetime. It would help 
clean up some lifetime issues we have between mission and play arena
and reduce dependency on play arena from mission. Some work in this 
direction has been started e.g. enemy creation forwards to an IMission method. 

Texture atlas IDs are using the EObjType enum, which should only be 
for game object types, but it's convenient because so many texture atlases 
happen to be used for game objects. But we should have two enums.

Need to implement more missions to fill in the "undefined" slots 
in the mission picker, and to fill out the gameplay.

