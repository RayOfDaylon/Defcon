Change log for Defense Condition game project

Author(s): Ray Gardener (support@daylongraphics.com)
Repository: https://github.com/RayOfDaylon/Defcon
September 24, 2023


Label of humans readout flashes when abductions are happening.

"Abduction in progress" messages removed except for last human.

Shield readout bar made thinner to match other readouts.

Renamed DURATION_IMPORTANT_MESSAGE to MESSAGE_DURATION_IMPORTANT 
and made it a preference. Added MESSAGE_DURATION preference 
for normal messages.

Pressing 'O' (not zero) will toggle double guns mode. 
When active, pressing Space will fire two laser bolts 
instead of one.

Game match stats track single vs. double shots.

Details page for pod includes notes on pod intersection.

#include fix for non-Unity build.

Game object IDs are generated by IMission instead of using static vars.
IMission ctor resets next ID to zero.

Synced to plugin to fix build issues.

Rebased Defcon mediator class to use Daylon::TFastMessageMediator 
to get a little performance boost (although negligible at this point 
since we don't have many message IDs).

Smartbomb readout uses graphic bar (arcade match) instead of digit.

Human status readout consumes HumanCount messages directly 
instead of parent status widget doing it on its behalf.

Bug fix for hidden enemies problem in Yllabian dogfights.
Bug fix for terrain occluding player ship and humans.

Added CFPoint::IsValid to help catch NaN errors.

Pod intersection destroyed by smartbomb destroys 
all involved swarmers and doubles explosion debris.
If the intersection didn't exist, then the 
pods explode normally and release swarmers.

Added smart bomb radius factor preference to let 
the reach of the smart bomb shockwave be customizable.

Assign horizontal direction for pods to alternate 
between left/right instead of being chosen randomly, 
to avoid cases where a pod intersection forms by 
all the pods moving towards it from the same 
direction.

Code cleanup (enemy game object instantation).

Holding down Shift key while pressing Tab key will reverse 
selection direction in the mission picker screen. It will 
also navigate to the previous page in the Details screen.

Pod intersection timer message displayed.

"Smart bomb awarded" message appears when a smart bomb is gained.

"All mission targets destroyed" message now a permanent message 
instead of a normal message, so it remains displayed 
until the player exits the mission.

User messages now shown using GMessageMediator instead of 
directly invoking widget methods.

More code cleanup, "enemy" --> "gameobject", AdjustAbductionStates 
now HumanStates, etc.

Adjusted human animation to closer match stride to walking speed.

Adjusted radar panel background, organized material assets better.

Added dark green interlace background to radar panel.

Customized collision force for spacehum, swarmer, munchie, 
guppy, hunter, and reformer part.

Changed radar's visible arena section lines to use 
arcade style thick rectangle sections.

Added boolean RaderIsPlayerCentric pref which, if false, 
arcade matches the radar centricity where the edges of 
the visible arena stay fixed in position instead of 
the player ship. Technically, a radar would always 
have the ship centered, and setting the pref to true 
will allow that.

Changed color of play area section dividers from gray to dark red.
Also thickened the stats-radar divider a bit to look closer 
in linewidth to the horizontal divider.

Added UTextBlock "TopMessage" to main arena widget, 
which now shows the "game paused" message instead of 
using the message log. It will also show the planned
"pod intersection" message.

Added help page for humans.

Changed human texture to animated, more detailed version.

Player ship appears redder as its shields weaken.

If all humans are killed and the player ship dies, 
the mission ends but the game transitions to the 
game over screen, instead of restarting the mission 
(which is pointless to play since it's just enemies 
without any humans to defend. Even if the next 
mission is a dogfight, the mission after that 
will be empty of humans).

Shield strength updates use CMessageMediator class, 
and shield readout changes color from blue to red 
as shields weaken.

Smartbomb count moved from game match to player ship.

Smartbomb count updates use CMessageMediator class.

Human count updates use new CMessageMediator template class
to improve loose coupling.

Finished the new "Humans" readout on the stats panel, 
which shows safe humans as green squares, abducted humans 
as red squares. The number of squares decreases as 
humans are killed.

Arena bog down slowest time factor increased from 0.5 to 0.67; 
things got a little too slow when using smart bombs to clear dense areas.

Current mission and god mode moved from game instance to game match.

Player ship, humans, smartbomb count, and score (XP) 
moved from CDefconGameInstance to new Defcon::CGameMatch class.
Those items only exist during a match and weren't supposed 
to be part of CDefconGameInstance which represents 
the entire game application.

Arena bog down preference supported more smoothly and 
only by checking debris count. Easy way to test is 
to detonate a smartbomb amid a dense group of enemies.

Attempting to detonate a smart bomb when none are 
available produces a message and plays the invalid selection sound.

Pressing Tab in the game over screen skips ahead to 
introducing the stats, to finish introducing them, 
and then to return to the main menu.

Added flashing alert widget to status panel which 
appears when a human is being abducted.

Added sprite atlas for reformer enemy on Details screen.

Added player ship to Details screen.

Bullet time feature added (press B). This will probably 
be only for debugging and unavailable in Shipping builds.

Pause feature added (press P).

Added sprite atlas for ghost enemy on Details screen.

Stars are occluded by terrain. (arcade mismatch) The arcade game 
simply didn't draw stars below the max terrain elevation, 
presumably to save CPU cycles by not viz-testing every frame.

Background starfield doesn't require two circumnavigations 
to sync the field to the terrain, only one as expected.

Added a Details arena (view) that shows information on 
each enemy type. Available by pressing Tab or Enter 
after choosing Help from the main menu. Press Tab or Enter 
to show the next page, or if you don't want to wait 
for the text to finish crawling. Some enemies don't 
have pictures (for now) because their appearance is composited 
from other textures, and no main texture is available.

Muchies come in different colors instead of always being green (arcade match).

Munchies don't materialize; instead are spawned by Phreds (arcade match).

Rescued humans (returned to ground) emit little hearts to
show their gratitude. The arcade game emitted score tips, 
but we don't show score or score tips.

Renamed UDefconPlayViewBase::SettlePlayer to KeepPlayerInView.

The background stars pan at half the speed of the 
foreground objects e.g. terrain. The Yllabian dogfight 
missions lack terrain so flying can seem slow, but 
it's what the original arcade game does.

Entering the stargate before mission end and without any 
human abductions in progress moves player ship to the 
other side of the planet (apparently this is what the 
original arcade game did -- the only way to teleport 
randomly was to use the Hyperspace button).

Laser beams use texture atlas that give disintegrating tail 
effect similar to arcade game.

Started work on invincibility powerup.

Removed all .cpp code related to unused IGameObject::GetClassname method.

Renamed PlayViewBase::FindHuman to FindNearestHuman.

Dropped explicit Const versions of some methods.

Renamed IGameObject::Move to Tick.

Play arena places the humans, and with a new "humans placed" flag 
in game instance, randomizes their x-positions on the first mission 
of a new game session.

Converted min/max pref vars to range vars, using the new 
Daylon::FRange type and its supporting global functions.

All arguments to IGameObject::Move should now be 'DeltaTime'.

Added secondary explosion texture atlas, 
makes enemy destruction more entertaining.

All military missions now use AddEnemySpawnInfo instead of 
having big, mostly duplicate code in MakeTargets.

Pressing Esc in the play arena transitions to mission picker 
instead of to main menu.

Renamed all references to tasks to use "task" nomenclature, 
including the name of the "event" code modules. "Event" 
is to mean notifications e.g. input events.

Mission class has a separate task list for enemy creation tasks, 
to make it easier for Mission::IsComplete to tell when 
no targets are pending creation.

Sprite uninstallation checks if widget is still valid, to prevent 
errors logged by Daylon::Uninstall. This happens when 
transitioning away from the play arena.

Started moving away from the "hostiles remaining" concept 
in CMilitaryMission, in favor of the more reliable 
checking of the current wave index and actually counting 
the current enemies list to see if any mission-critical 
targets remain.

Renamed HostilesRemaining to TargetsRemaining.

All mission classes have to define the MaxWaves member.

Renamed CEvent to CScheduledTask and CEventQueue to 
CScheduledTaskList.

Moved gamename.dat resource file to inline C++ code to avoid 
problem with packaged builds not including that "asset".

Several old preference items removed.

Lander descent/ascent rate ranged and grow faster with XP.
Lander appearance vertical range increased to upper half of arena.

Smart bomb resupply XP increased to 20,000.

Player ship input handling directly updates its 
navigation control state instead of using an 
intermediate state array; UpdatePlayerShipInputs removed.

ILiveGameObject's motion physics changed to use 
explicit duration instead of computed from current game time.
GameTime() function commented out since we shouldn't use it.

ExplodeObject renamed to DestroyObject; explosion 
is a boolean parameter.

Game object processor marks objects as dead and calls 
their OnAboutToDie method instead of each object class 
doing it in their Explode() method.

Most Explode() method code now uses AddExplosionDebris().

Intro screen moved company name to center, then fades it out
as title collapses around it.

Player ship's max thrust preference increased to make 
speed closer to the arcade version.

Global replace of 'int' with 'int32'.

Code cleanup of mapper classes.

